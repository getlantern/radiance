// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/getlantern/radiance/client (interfaces: VPNClient)
//
// Generated by this command:
//
//	mockgen -destination=vpn_client_test.go -package=radiance github.com/getlantern/radiance/client VPNClient
//

// Package radiance is a generated GoMock package.
package radiance

import (
	reflect "reflect"
	time "time"

	client "github.com/getlantern/radiance/client"
	gomock "go.uber.org/mock/gomock"
)

// MockVPNClient is a mock of VPNClient interface.
type MockVPNClient struct {
	ctrl     *gomock.Controller
	recorder *MockVPNClientMockRecorder
	isgomock struct{}
}

// MockVPNClientMockRecorder is the mock recorder for MockVPNClient.
type MockVPNClientMockRecorder struct {
	mock *MockVPNClient
}

// NewMockVPNClient creates a new mock instance.
func NewMockVPNClient(ctrl *gomock.Controller) *MockVPNClient {
	mock := &MockVPNClient{ctrl: ctrl}
	mock.recorder = &MockVPNClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPNClient) EXPECT() *MockVPNClientMockRecorder {
	return m.recorder
}

// DeselectCustomServer mocks base method.
func (m *MockVPNClient) DeselectCustomServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeselectCustomServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeselectCustomServer indicates an expected call of DeselectCustomServer.
func (mr *MockVPNClientMockRecorder) DeselectCustomServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeselectCustomServer", reflect.TypeOf((*MockVPNClient)(nil).DeselectCustomServer))
}

// Pause mocks base method.
func (m *MockVPNClient) Pause(dur time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", dur)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockVPNClientMockRecorder) Pause(dur any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockVPNClient)(nil).Pause), dur)
}

// Resume mocks base method.
func (m *MockVPNClient) Resume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume")
}

// Resume indicates an expected call of Resume.
func (mr *MockVPNClientMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockVPNClient)(nil).Resume))
}

// SelectCustomServer mocks base method.
func (m *MockVPNClient) SelectCustomServer(cfg client.ServerConnectConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCustomServer", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectCustomServer indicates an expected call of SelectCustomServer.
func (mr *MockVPNClientMockRecorder) SelectCustomServer(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCustomServer", reflect.TypeOf((*MockVPNClient)(nil).SelectCustomServer), cfg)
}

// Start mocks base method.
func (m *MockVPNClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockVPNClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVPNClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockVPNClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockVPNClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVPNClient)(nil).Stop))
}
