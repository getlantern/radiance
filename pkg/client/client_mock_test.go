// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -destination ./client_mock_test.go -source client.go -package client server
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	config "github.com/getlantern/radiance/config"
	gomock "go.uber.org/mock/gomock"
)

// Mockserver is a mock of server interface.
type Mockserver struct {
	ctrl     *gomock.Controller
	recorder *MockserverMockRecorder
	isgomock struct{}
}

// MockserverMockRecorder is the mock recorder for Mockserver.
type MockserverMockRecorder struct {
	mock *Mockserver
}

// NewMockserver creates a new mock instance.
func NewMockserver(ctrl *gomock.Controller) *Mockserver {
	mock := &Mockserver{ctrl: ctrl}
	mock.recorder = &MockserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockserver) EXPECT() *MockserverMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *Mockserver) GetConfig(ctx context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockserverMockRecorder) GetConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*Mockserver)(nil).GetConfig), ctx)
}

// Run mocks base method.
func (m *Mockserver) Run(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockserverMockRecorder) Run(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockserver)(nil).Run), addr)
}

// Shutdown mocks base method.
func (m *Mockserver) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockserverMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*Mockserver)(nil).Shutdown))
}
