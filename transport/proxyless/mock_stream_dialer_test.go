// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jigsaw-Code/outline-sdk/transport (interfaces: StreamDialer)
//
// Generated by this command:
//
//	mockgen -destination=mock_stream_dialer_test.go -package=proxyless github.com/Jigsaw-Code/outline-sdk/transport StreamDialer
//

// Package proxyless is a generated GoMock package.
package proxyless

import (
	context "context"
	reflect "reflect"

	transport "github.com/Jigsaw-Code/outline-sdk/transport"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamDialer is a mock of StreamDialer interface.
type MockStreamDialer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamDialerMockRecorder
	isgomock struct{}
}

// MockStreamDialerMockRecorder is the mock recorder for MockStreamDialer.
type MockStreamDialerMockRecorder struct {
	mock *MockStreamDialer
}

// NewMockStreamDialer creates a new mock instance.
func NewMockStreamDialer(ctrl *gomock.Controller) *MockStreamDialer {
	mock := &MockStreamDialer{ctrl: ctrl}
	mock.recorder = &MockStreamDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamDialer) EXPECT() *MockStreamDialerMockRecorder {
	return m.recorder
}

// DialStream mocks base method.
func (m *MockStreamDialer) DialStream(ctx context.Context, raddr string) (transport.StreamConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialStream", ctx, raddr)
	ret0, _ := ret[0].(transport.StreamConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialStream indicates an expected call of DialStream.
func (mr *MockStreamDialerMockRecorder) DialStream(ctx, raddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialStream", reflect.TypeOf((*MockStreamDialer)(nil).DialStream), ctx, raddr)
}
