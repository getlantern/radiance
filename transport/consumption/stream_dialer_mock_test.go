// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jigsaw-Code/outline-sdk/transport (interfaces: StreamDialer,StreamConn)
//
// Generated by this command:
//
//	mockgen -destination=./stream_dialer_mock_test.go -package=consumption github.com/Jigsaw-Code/outline-sdk/transport StreamDialer,StreamConn
//

// Package consumption is a generated GoMock package.
package consumption

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	transport "github.com/Jigsaw-Code/outline-sdk/transport"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamDialer is a mock of StreamDialer interface.
type MockStreamDialer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamDialerMockRecorder
	isgomock struct{}
}

// MockStreamDialerMockRecorder is the mock recorder for MockStreamDialer.
type MockStreamDialerMockRecorder struct {
	mock *MockStreamDialer
}

// NewMockStreamDialer creates a new mock instance.
func NewMockStreamDialer(ctrl *gomock.Controller) *MockStreamDialer {
	mock := &MockStreamDialer{ctrl: ctrl}
	mock.recorder = &MockStreamDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamDialer) EXPECT() *MockStreamDialerMockRecorder {
	return m.recorder
}

// DialStream mocks base method.
func (m *MockStreamDialer) DialStream(ctx context.Context, raddr string) (transport.StreamConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialStream", ctx, raddr)
	ret0, _ := ret[0].(transport.StreamConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialStream indicates an expected call of DialStream.
func (mr *MockStreamDialerMockRecorder) DialStream(ctx, raddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialStream", reflect.TypeOf((*MockStreamDialer)(nil).DialStream), ctx, raddr)
}

// MockStreamConn is a mock of StreamConn interface.
type MockStreamConn struct {
	ctrl     *gomock.Controller
	recorder *MockStreamConnMockRecorder
	isgomock struct{}
}

// MockStreamConnMockRecorder is the mock recorder for MockStreamConn.
type MockStreamConnMockRecorder struct {
	mock *MockStreamConn
}

// NewMockStreamConn creates a new mock instance.
func NewMockStreamConn(ctrl *gomock.Controller) *MockStreamConn {
	mock := &MockStreamConn{ctrl: ctrl}
	mock.recorder = &MockStreamConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamConn) EXPECT() *MockStreamConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamConn)(nil).Close))
}

// CloseRead mocks base method.
func (m *MockStreamConn) CloseRead() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRead")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRead indicates an expected call of CloseRead.
func (mr *MockStreamConnMockRecorder) CloseRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRead", reflect.TypeOf((*MockStreamConn)(nil).CloseRead))
}

// CloseWrite mocks base method.
func (m *MockStreamConn) CloseWrite() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWrite")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWrite indicates an expected call of CloseWrite.
func (mr *MockStreamConnMockRecorder) CloseWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWrite", reflect.TypeOf((*MockStreamConn)(nil).CloseWrite))
}

// LocalAddr mocks base method.
func (m *MockStreamConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockStreamConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockStreamConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockStreamConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStreamConnMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStreamConn)(nil).Read), b)
}

// RemoteAddr mocks base method.
func (m *MockStreamConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockStreamConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockStreamConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockStreamConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockStreamConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockStreamConn)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockStreamConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockStreamConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockStreamConn)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockStreamConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockStreamConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockStreamConn)(nil).SetWriteDeadline), t)
}

// Write mocks base method.
func (m *MockStreamConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStreamConnMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStreamConn)(nil).Write), b)
}
